import { JWKInterface } from 'arweave/node/lib/wallet.js';
import { Command, OptionValues } from 'commander';
import { ARIOToken, AoANTRead, AoANTWrite, AoARIORead, AoARIOWrite, AoRedelegateStakeParams, AoSigner, AoUpdateGatewaySettingsParams, ContractSigner, EpochInput, Logger, PaginationParams, SpawnANTState, WriteOptions, mARIOToken } from '../node/index.js';
import { ANTStateCLIOptions, AddressCLIOptions, EpochCLIOptions, GlobalCLIOptions, InitiatorCLIOptions, JsonSerializable, PaginationCLIOptions, ProcessIdCLIOptions, RedelegateStakeCLIOptions, TransferCLIOptions, UpdateGatewaySettingsCLIOptions, WalletCLIOptions, WriteActionCLIOptions } from './types.js';
export declare function stringifyJsonForCLIDisplay(json: JsonSerializable | unknown): string;
export declare function runCommand<O extends OptionValues>(command: Command, action: (options: O) => Promise<JsonSerializable>): Promise<void>;
export interface CommanderOption {
    alias: string;
    description: string;
    default?: string | boolean;
}
export declare function applyOptions(command: Command, options: CommanderOption[]): Command;
export declare function makeCommand<O extends OptionValues = GlobalCLIOptions>({ description, name, options, action, }: {
    name: string;
    description: string;
    action?: (options: O) => Promise<JsonSerializable>;
    options?: CommanderOption[];
}): Command;
export declare function arioProcessIdFromOptions({ arioProcessId, dev, }: GlobalCLIOptions): string;
export declare function requiredJwkFromOptions(options: WalletCLIOptions): JWKInterface;
export declare function jwkToAddress(jwk: JWKInterface): string;
export declare function getLoggerFromOptions(options: GlobalCLIOptions): Logger;
export declare function readARIOFromOptions(options: GlobalCLIOptions): AoARIORead;
export declare function requiredContractSignerFromOptions(options: WalletCLIOptions): {
    signer: ContractSigner;
    signerAddress: string;
};
export declare function requiredAoSignerFromOptions(options: WalletCLIOptions): AoSigner;
export declare function writeARIOFromOptions(options: GlobalCLIOptions): {
    ario: AoARIOWrite;
    signerAddress: string;
};
export declare function formatARIOWithCommas(value: ARIOToken): string;
/** helper to get address from --address option first, then check wallet options  */
export declare function addressFromOptions<O extends AddressCLIOptions>(options: O): string | undefined;
export declare function requiredAddressFromOptions<O extends AddressCLIOptions>(options: O): string;
export declare function paginationParamsFromOptions<O extends PaginationCLIOptions>(options: O): PaginationParams & {
    sortBy: any;
};
export declare function epochInputFromOptions(options: EpochCLIOptions): EpochInput;
export declare function requiredInitiatorFromOptions(options: InitiatorCLIOptions): string;
export declare function writeActionTagsFromOptions<O extends WriteActionCLIOptions>(options: O): WriteOptions;
export declare function gatewaySettingsFromOptions({ allowDelegatedStaking, autoStake, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, observerAddress, port, properties, allowedDelegates, }: UpdateGatewaySettingsCLIOptions): AoUpdateGatewaySettingsParams;
export declare function requiredTargetAndQuantityFromOptions(options: TransferCLIOptions): {
    target: string;
    arioQuantity: ARIOToken;
};
export declare function redelegateParamsFromOptions(options: RedelegateStakeCLIOptions): AoRedelegateStakeParams & {
    stakeQty: mARIOToken;
};
export declare function recordTypeFromOptions<O extends {
    type?: string;
}>(options: O): 'lease' | 'permabuy';
export declare function requiredMIOFromOptions<O extends GlobalCLIOptions>(options: O, key: string): mARIOToken;
export declare function assertEnoughBalance(ario: AoARIORead, address: string, arioQuantity: ARIOToken): Promise<void>;
export declare function confirmationPrompt(message: string): Promise<boolean>;
export declare function assertConfirmationPrompt<O extends {
    skipConfirmation?: boolean;
}>(message: string, options: O): Promise<boolean>;
export declare function requiredProcessIdFromOptions<O extends ProcessIdCLIOptions>(o: O): string;
export declare function readANTFromOptions(options: ProcessIdCLIOptions): AoANTRead;
export declare function writeANTFromOptions(options: ProcessIdCLIOptions, signer?: ContractSigner): AoANTWrite;
export declare function requiredStringFromOptions<O extends GlobalCLIOptions>(options: O, key: string): string;
export declare function requiredStringArrayFromOptions<O extends GlobalCLIOptions>(options: O, key: string): string[];
export declare function positiveIntegerFromOptions<O extends GlobalCLIOptions>(options: O, key: string): number | undefined;
export declare function requiredPositiveIntegerFromOptions<O extends GlobalCLIOptions>(options: O, key: string): number;
export declare function getANTStateFromOptions(options: ANTStateCLIOptions): SpawnANTState;
