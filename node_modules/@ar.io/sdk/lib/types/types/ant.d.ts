/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { z } from 'zod';
import { AoMessageResult, WalletAddress, WriteOptions } from './common.js';
/**
 * example error:
 *  {
        "code": "custom",
        "message": "Must be an Arweave Transaction ID",
        "path": [
          "Records",
          "record1",
          "transactionId"
        ]
      },
 */
export declare const ArweaveTxIdSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const IntegerStringSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const AntDescriptionSchema: z.ZodString;
export declare const AntKeywordsSchema: z.ZodArray<z.ZodString, "many">;
export declare const AntRecordSchema: z.ZodObject<{
    transactionId: z.ZodEffects<z.ZodString, string, string>;
    ttlSeconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    transactionId: string;
    ttlSeconds: number;
}, {
    transactionId: string;
    ttlSeconds: number;
}>;
export type AoANTRecord = z.infer<typeof AntRecordSchema>;
export declare const AntRecordsSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    transactionId: z.ZodEffects<z.ZodString, string, string>;
    ttlSeconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    transactionId: string;
    ttlSeconds: number;
}, {
    transactionId: string;
    ttlSeconds: number;
}>>;
export declare const AntControllersSchema: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
export declare const AntBalancesSchema: z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodNumber>;
export declare const AntStateSchema: z.ZodObject<{
    Name: z.ZodString;
    Ticker: z.ZodString;
    Description: z.ZodString;
    Keywords: z.ZodArray<z.ZodString, "many">;
    Denomination: z.ZodNumber;
    Owner: z.ZodEffects<z.ZodString, string, string>;
    Controllers: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
    Records: z.ZodRecord<z.ZodString, z.ZodObject<{
        transactionId: z.ZodEffects<z.ZodString, string, string>;
        ttlSeconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        transactionId: string;
        ttlSeconds: number;
    }, {
        transactionId: string;
        ttlSeconds: number;
    }>>;
    Balances: z.ZodRecord<z.ZodEffects<z.ZodString, string, string>, z.ZodNumber>;
    Logo: z.ZodEffects<z.ZodString, string, string>;
    TotalSupply: z.ZodNumber;
    Initialized: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    Name: string;
    Ticker: string;
    Description: string;
    Keywords: string[];
    Denomination: number;
    Owner: string;
    Controllers: string[];
    Records: Record<string, {
        transactionId: string;
        ttlSeconds: number;
    }>;
    Balances: Record<string, number>;
    Logo: string;
    TotalSupply: number;
    Initialized: boolean;
}, {
    Name: string;
    Ticker: string;
    Description: string;
    Keywords: string[];
    Denomination: number;
    Owner: string;
    Controllers: string[];
    Records: Record<string, {
        transactionId: string;
        ttlSeconds: number;
    }>;
    Balances: Record<string, number>;
    Logo: string;
    TotalSupply: number;
    Initialized: boolean;
}>;
export type AoANTState = z.infer<typeof AntStateSchema>;
export declare const AntReadHandlers: readonly ["balance", "balances", "totalSupply", "info", "controllers", "record", "records", "state"];
export type AoANTReadHandler = (typeof AntReadHandlers)[number];
export declare const AntWriteHandlers: readonly ["_eval", "_default", "transfer", "addController", "removeController", "setRecord", "removeRecord", "setName", "setTicker", "setDescription", "setKeywords", "setLogo", "initializeState", "releaseName", "reassignName", "approvePrimaryName", "removePrimaryNames"];
export type AoANTWriteHandler = (typeof AntWriteHandlers)[number];
export declare const AntHandlerNames: ("balance" | "balances" | "totalSupply" | "info" | "controllers" | "record" | "records" | "state" | "_eval" | "_default" | "transfer" | "addController" | "removeController" | "setRecord" | "removeRecord" | "setName" | "setTicker" | "setDescription" | "setKeywords" | "setLogo" | "initializeState" | "releaseName" | "reassignName" | "approvePrimaryName" | "removePrimaryNames")[];
export type AoANTHandler = AoANTWriteHandler | AoANTReadHandler;
export declare const AntHandlersSchema: z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], string[]>;
export declare const AntInfoSchema: z.ZodObject<{
    Name: z.ZodString;
    Owner: z.ZodEffects<z.ZodString, string, string>;
    Ticker: z.ZodString;
    "Total-Supply": z.ZodEffects<z.ZodString, string, string>;
    Description: z.ZodString;
    Keywords: z.ZodArray<z.ZodString, "many">;
    Logo: z.ZodEffects<z.ZodString, string, string>;
    Denomination: z.ZodEffects<z.ZodString, string, string>;
    Handlers: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], string[]>>;
    HandlerNames: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], string[]>>;
}, "strip", z.ZodTypeAny, {
    Name: string;
    Ticker: string;
    Description: string;
    Keywords: string[];
    Denomination: string;
    Owner: string;
    Logo: string;
    "Total-Supply": string;
    Handlers?: string[] | undefined;
    HandlerNames?: string[] | undefined;
}, {
    Name: string;
    Ticker: string;
    Description: string;
    Keywords: string[];
    Denomination: string;
    Owner: string;
    Logo: string;
    "Total-Supply": string;
    Handlers?: string[] | undefined;
    HandlerNames?: string[] | undefined;
}>;
export type AoANTInfo = z.infer<typeof AntInfoSchema>;
/**
 * @param state {object}
 * @returns {boolean}
 */
export declare function isAoANTState(state: object): state is AoANTState;
export type AntReadOptions = {
    strict?: boolean;
};
export interface AoANTRead {
    getState(opts?: AntReadOptions): Promise<AoANTState>;
    getInfo(opts?: AntReadOptions): Promise<AoANTInfo>;
    getRecord({ undername }: {
        undername: string;
    }, opts?: AntReadOptions): Promise<AoANTRecord | undefined>;
    getRecords(opts?: AntReadOptions): Promise<Record<string, AoANTRecord>>;
    getOwner(opts?: AntReadOptions): Promise<WalletAddress>;
    getControllers(): Promise<WalletAddress[]>;
    getTicker(opts?: AntReadOptions): Promise<string>;
    getName(opts?: AntReadOptions): Promise<string>;
    getBalance({ address }: {
        address: WalletAddress;
    }, opts?: AntReadOptions): Promise<number>;
    getBalances(opts?: AntReadOptions): Promise<Record<WalletAddress, number>>;
    getHandlers(): Promise<AoANTHandler[]>;
}
export interface AoANTWrite extends AoANTRead {
    transfer({ target }: {
        target: WalletAddress;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    addController({ controller, }: {
        controller: WalletAddress;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    removeController({ controller, }: {
        controller: WalletAddress;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setRecord({ undername, transactionId, ttlSeconds, }: {
        undername: string;
        transactionId: string;
        ttlSeconds: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    removeRecord({ undername }: {
        undername: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setTicker({ ticker }: {
        ticker: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setDescription({ description }: {
        description: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setKeywords({ keywords }: {
        keywords: string[];
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setName({ name }: {
        name: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    setLogo({ txId }: {
        txId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    releaseName({ name, arioProcessId }: {
        name: string;
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    reassignName({ name, arioProcessId, antProcessId, }: {
        name: string;
        arioProcessId: string;
        antProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    approvePrimaryNameRequest({ name, address, arioProcessId, }: {
        name: string;
        address: WalletAddress;
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    removePrimaryNames({ names, arioProcessId }: {
        names: string[];
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
}
