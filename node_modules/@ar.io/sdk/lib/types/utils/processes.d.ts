/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter } from 'eventemitter3';
import { ILogger } from '../common/logger.js';
import { AoANTRegistryRead } from '../types/ant-registry.js';
import { AoARIORead, AoArNSNameData, ProcessId, WalletAddress } from '../types/index.js';
/**
 * @beta This API is in beta and may change in the future.
 */
export declare const getANTProcessesOwnedByWallet: ({ address, registry, }: {
    address: WalletAddress;
    registry?: AoANTRegistryRead;
}) => Promise<ProcessId[]>;
export declare class ArNSEventEmitter extends EventEmitter {
    protected contract: AoARIORead;
    private timeoutMs;
    private throttle;
    private logger;
    private strict;
    constructor({ contract, timeoutMs, concurrency, logger, strict, }?: {
        contract?: AoARIORead;
        timeoutMs?: number;
        concurrency?: number;
        logger?: ILogger;
        strict?: boolean;
    });
    fetchProcessesOwnedByWallet({ address, pageSize, antRegistry, }: {
        address: WalletAddress;
        pageSize?: number;
        antRegistry?: AoANTRegistryRead;
    }): Promise<void>;
}
export declare const fetchAllArNSRecords: ({ contract, emitter, logger, pageSize, }: {
    contract?: AoARIORead;
    emitter?: EventEmitter;
    logger?: ILogger;
    pageSize?: number;
}) => Promise<Record<string, AoArNSNameData>>;
