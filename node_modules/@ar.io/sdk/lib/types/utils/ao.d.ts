import Arweave from 'arweave';
import { Logger } from '../common/index.js';
import { AoANTRecord } from '../types/ant.js';
import { AoClient, AoSigner, ContractSigner, WalletAddress } from '../types/index.js';
export type SpawnANTState = {
    owner: WalletAddress;
    controllers: WalletAddress[];
    name: string;
    description: string;
    keywords: string[];
    ticker: string;
    records: Record<string, AoANTRecord>;
    balances: Record<WalletAddress, number>;
};
export type SpawnANTParams = {
    signer: AoSigner;
    module?: string;
    luaCodeTxId?: string;
    ao?: AoClient;
    scheduler?: string;
    state?: SpawnANTState;
    stateContractTxId?: string;
    antRegistryId?: string;
    logger?: Logger;
    arweave?: Arweave;
};
export declare function spawnANT({ signer, module, luaCodeTxId, ao, scheduler, state, stateContractTxId, antRegistryId, logger, arweave, }: SpawnANTParams): Promise<string>;
export declare function evolveANT({ signer, processId, luaCodeTxId, ao, logger, arweave, }: {
    signer: AoSigner;
    processId: string;
    luaCodeTxId?: string;
    ao?: AoClient;
    logger?: Logger;
    arweave?: Arweave;
}): Promise<string>;
export declare function isAoSigner(value: unknown): value is AoSigner;
export declare function createAoSigner(signer: ContractSigner): AoSigner;
export declare const defaultTargetManifestId = "-k7t8xMoB8hW482609Z9F4bTFMC3MnuW8bTvTyT8pFI";
export declare function initANTStateForAddress({ owner, targetId, ttlSeconds, keywords, controllers, description, ticker, name, }: Partial<SpawnANTState> & {
    targetId?: string;
    ttlSeconds?: number;
    owner: WalletAddress;
}): SpawnANTState;
