import { AntReadOptions, AoANTHandler, AoANTInfo, AoANTRead, AoANTRecord, AoANTState, AoANTWrite } from '../types/ant.js';
import { AoMessageResult, ProcessConfiguration, WalletAddress, WithSigner, WriteOptions } from '../types/index.js';
import { AOProcess } from './index.js';
export declare class ANT {
    static init(config: Required<ProcessConfiguration> & {
        signer?: undefined;
        strict?: boolean;
    }): AoANTRead;
    static init({ signer, ...config }: WithSigner<Required<ProcessConfiguration>> & {
        strict?: boolean;
    }): AoANTWrite;
}
export declare class AoANTReadable implements AoANTRead {
    protected process: AOProcess;
    private strict;
    constructor(config: Required<ProcessConfiguration> & {
        strict?: boolean;
    });
    getState({ strict }?: AntReadOptions): Promise<AoANTState>;
    getInfo({ strict }?: AntReadOptions): Promise<AoANTInfo>;
    /**
     * @param undername @type {string} The domain name.
     * @returns {Promise<ANTRecord>} The record of the undername domain.
     * @example
     * Get the current record
     * ```ts
     * ant.getRecord({ undername: "john" });
     * ```
     */
    getRecord({ undername }: {
        undername: string;
    }, { strict }?: AntReadOptions): Promise<AoANTRecord>;
    /**
     * @returns {Promise<Record<string, AoANTRecord>>} All the undernames managed by the ANT.
     * @example
     * Get the current records
     * ```ts
     * ant.getRecords();
     * ````
     */
    getRecords({ strict }?: AntReadOptions): Promise<Record<string, AoANTRecord>>;
    /**
     * @returns {Promise<string>} The owner of the ANT.
     * @example
     * Get the current owner
     * ```ts
     *  ant.getOwner();
     * ```
     */
    getOwner({ strict }?: AntReadOptions): Promise<string>;
    /**
     * @returns {Promise<string[]>} The controllers of the ANT.
     * @example
     * Get the controllers of the ANT.
     * ```ts
     * ant.getControllers();
     * ```
     */
    getControllers({ strict }?: AntReadOptions): Promise<WalletAddress[]>;
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * Get the current name
     * ```ts
     * ant.getName();
     * ```
     */
    getName({ strict }?: AntReadOptions): Promise<string>;
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * The current ticker of the ANT.
     * ```ts
     * ant.getTicker();
     * ```
     */
    getTicker({ strict }?: AntReadOptions): Promise<string>;
    /**
     * @returns {Promise<Record<WalletAddress, number>>} The balances of the ANT
     * @example
     * The current balances of the ANT.
     * ```ts
     * ant.getBalances();
     * ```
     */
    getBalances({ strict }?: AntReadOptions): Promise<Record<string, number>>;
    /**
     * @param address @type {string} The address of the account you want the balance of.
     * @returns {Promise<number>} The balance of the provided address
     * @example
     * The current balance of the address.
     * ```ts
     * ant.getBalance({ address });
     * ```
     */
    getBalance({ address }: {
        address: string;
    }, { strict }?: AntReadOptions): Promise<number>;
    /**
     * @returns {Promise<AoANTHandler[]>} The handlers of the ANT.
     * @example
     * Get the handlers of the ANT.
     * ```ts
     * const handlers = await ant.getHandlers();
     * ```
     */
    getHandlers(): Promise<AoANTHandler[]>;
}
export declare class AoANTWriteable extends AoANTReadable implements AoANTWrite {
    private signer;
    constructor({ signer, ...config }: WithSigner<Required<ProcessConfiguration>> & {
        strict?: boolean;
    });
    /**
     * @param target @type {string} The address of the account you want to transfer the ANT to.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.transfer({ target: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    transfer({ target }: {
        target: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param controller @type {string} The address of the account you want to set as a controller.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    addController({ controller, }: {
        controller: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param controller @type {string} The address of the account you want to remove from the controllers list
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    removeController({ controller, }: {
        controller: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param undername @type {string} The record you want to set the transactionId and ttlSeconds of.
     * @param transactionId @type {string} The transactionId of the record.
     * @param ttlSeconds @type {number} The time to live of the record.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    setRecord({ undername, transactionId, ttlSeconds, }: {
        undername: string;
        transactionId: string;
        ttlSeconds: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param undername @type {string} The record you want to remove.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeRecord({ subDomain: "shorts" });
     * ```
     */
    removeRecord({ undername, }: {
        undername: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param ticker @type {string} Sets the ANT Ticker.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setTicker({ ticker: "KAPOW" });
     * ```
     */
    setTicker({ ticker }: {
        ticker: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param name @type {string} Sets the Name of the ANT.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setName({ name: "test" }); // results in the resolution of `test_<apexName>.ar.io`
     * ```
     */
    setName({ name }: {
        name: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param description @type {string} Sets the ANT Description.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setDescription({ description: "This name is used for the ArDrive" });
     * ```
     */
    setDescription({ description }: {
        description: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param keywords @type {string[]} Sets the ANT Keywords.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setKeywords({ keywords: ['keyword1', 'keyword2', 'keyword3']});
     * ```
     */
    setKeywords({ keywords }: {
        keywords: string[];
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param txId @type {string} - Arweave transaction id of the logo we want to set
     * @param options @type {WriteOptions} - additional options to add to the write interaction (optional)
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setLogo({ logo: "U7RXcpaVShG4u9nIcPVmm2FJSM5Gru9gQCIiRaIPV7f" });
     * ```
     */
    setLogo({ txId }: {
        txId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * @param name @type {string} The name you want to release. The name will be put up for as a recently returned name on the ARIO contract. 50% of the winning bid will be distributed to the ANT owner at the time of purchase. If no purchase in the recently returned name period (14 epochs), the name will be released and can be reregistered by anyone.
     * @param arioProcessId @type {string} The processId of the ARIO contract. This is where the ANT will send the message to release the name.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.releaseName({ name: "ardrive", arioProcessId: AR_TESTNET_PROCESS_ID });
     * ```
     */
    releaseName({ name, arioProcessId }: {
        name: string;
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Sends a message to the ARIO contract to reassign the name to a new ANT. This can only be done by the current owner of the ANT.
     * @param name @type {string} The name you want to reassign.
     * @param arioProcessId @type {string} The processId of the ARIO contract.
     * @param antProcessId @type {string} The processId of the ANT contract.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.reassignName({ name: "ardrive", arioProcessId: ARIO_TESTNET_PROCESS_ID, antProcessId: NEW_ANT_PROCESS_ID });
     * ```
     */
    reassignName({ name, arioProcessId, antProcessId, }: {
        name: string;
        arioProcessId: string;
        antProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Approves a primary name request for a given name or address.
     */
    approvePrimaryNameRequest({ name, address, arioProcessId, }: {
        name: string;
        address: WalletAddress;
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    removePrimaryNames({ names, arioProcessId }: {
        names: string[];
        arioProcessId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
}
