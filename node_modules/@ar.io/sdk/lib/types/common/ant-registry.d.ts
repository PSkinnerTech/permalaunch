import { AoANTRegistryRead, AoANTRegistryWrite } from '../types/ant-registry.js';
import { AoMessageResult, ProcessConfiguration, WithSigner } from '../types/index.js';
import { AOProcess } from './index.js';
export declare class ANTRegistry {
    static init(): AoANTRegistryRead;
    static init(config: Required<ProcessConfiguration> & {
        signer?: undefined;
    }): AoANTRegistryRead;
    static init({ signer, ...config }: WithSigner<Required<ProcessConfiguration>>): AoANTRegistryWrite;
}
export declare class AoANTRegistryReadable implements AoANTRegistryRead {
    protected process: AOProcess;
    constructor(config?: ProcessConfiguration);
    accessControlList({ address, }: {
        address: string;
    }): Promise<{
        Owned: string[];
        Controlled: string[];
    }>;
}
export declare class AoANTRegistryWriteable extends AoANTRegistryReadable implements AoANTRegistryWrite {
    private signer;
    constructor({ signer, ...config }: WithSigner<ProcessConfiguration>);
    register({ processId, }: {
        processId: string;
    }): Promise<AoMessageResult>;
}
