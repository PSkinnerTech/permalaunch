/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Arweave from 'arweave';
import { AoArNSNameDataWithName, AoArNSReservedNameData, AoBalanceWithAddress, AoEpochDistributionData, AoEpochObservationData, AoGatewayWithAddress, AoJoinNetworkParams, AoMessageResult, AoPrimaryName, AoPrimaryNameRequest, AoRedelegationFeeInfo, AoReturnedName, AoTokenSupplyData, AoUpdateGatewaySettingsParams, AoWeightedObserver, ContractSigner, PaginationParams, PaginationResult, ProcessConfiguration, TransactionId, WalletAddress, WithSigner, WriteOptions } from '../types/index.js';
import { AoARIORead, AoARIOWrite, AoArNSNameData, AoArNSReservedNameDataWithName, AoDelegation, AoEpochData, AoEpochSettings, AoGateway, AoGatewayDelegateWithAddress, AoGatewayRegistrySettings, AoGatewayVault, AoPaginatedAddressParams, AoRegistrationFees, AoVaultData, AoWalletVault, DemandFactorSettings, EpochInput } from '../types/io.js';
import { mARIOToken } from '../types/token.js';
import { AOProcess } from './contracts/ao-process.js';
export declare class ARIO {
    static init(): AoARIORead;
    static init({ process }: {
        process: AOProcess;
    }): AoARIORead;
    static init({ process, signer, }: WithSigner<{
        process: AOProcess;
    }>): AoARIOWrite;
    static init({ processId, signer, }: WithSigner<{
        processId: string;
    }>): AoARIOWrite;
    static init({ processId, signer, }: {
        signer?: ContractSigner | undefined;
        processId: string;
    }): any;
    static init({ processId }: {
        processId: string;
    }): AoARIORead;
}
export declare class ARIOReadable implements AoARIORead {
    protected process: AOProcess;
    private arweave;
    constructor(config?: ProcessConfiguration, arweave?: Arweave);
    getInfo(): Promise<{
        Name: string;
        Ticker: string;
        Logo: string;
        Denomination: number;
        Handlers: string[];
        LastTickedEpochIndex: number;
    }>;
    getTokenSupply(): Promise<AoTokenSupplyData>;
    getEpochSettings(params?: EpochInput): Promise<AoEpochSettings>;
    getEpoch(epoch?: EpochInput): Promise<AoEpochData>;
    getArNSRecord({ name, }: {
        name: string;
    }): Promise<AoArNSNameData | undefined>;
    getArNSRecords(params?: PaginationParams<AoArNSNameDataWithName>): Promise<PaginationResult<AoArNSNameDataWithName>>;
    getArNSReservedNames(params?: PaginationParams<AoArNSReservedNameDataWithName>): Promise<PaginationResult<AoArNSReservedNameDataWithName>>;
    getArNSReservedName({ name, }: {
        name: string;
    }): Promise<AoArNSReservedNameData | undefined>;
    getBalance({ address }: {
        address: WalletAddress;
    }): Promise<number>;
    getBalances(params?: PaginationParams<AoBalanceWithAddress>): Promise<PaginationResult<AoBalanceWithAddress>>;
    getVault({ address, vaultId, }: {
        address: WalletAddress;
        vaultId: string;
    }): Promise<AoVaultData>;
    getVaults(params?: PaginationParams<AoWalletVault>): Promise<PaginationResult<AoWalletVault>>;
    getGateway({ address, }: {
        address: WalletAddress;
    }): Promise<AoGateway | undefined>;
    getGatewayDelegates({ address, ...pageParams }: {
        [x: string]: any;
        address: any;
    }): Promise<PaginationResult<AoGatewayDelegateWithAddress>>;
    getGatewayDelegateAllowList({ address, ...pageParams }: AoPaginatedAddressParams): Promise<PaginationResult<WalletAddress>>;
    getGateways(pageParams?: PaginationParams<AoGatewayWithAddress>): Promise<PaginationResult<AoGatewayWithAddress>>;
    getCurrentEpoch(): Promise<AoEpochData>;
    getPrescribedObservers(epoch?: EpochInput): Promise<AoWeightedObserver[]>;
    getPrescribedNames(epoch?: EpochInput): Promise<string[]>;
    getObservations(epoch?: EpochInput): Promise<AoEpochObservationData>;
    getDistributions(epoch?: EpochInput): Promise<AoEpochDistributionData>;
    getTokenCost(params: {
        intent: 'Buy-Record';
        type: 'permabuy' | 'lease';
        years: number;
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Extend-Lease';
        years: number;
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Increase-Undername-Limit';
        quantity: number;
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Upgrade-Name';
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Primary-Name-Request';
        name: string;
    }): Promise<number>;
    getRegistrationFees(): Promise<AoRegistrationFees>;
    getDemandFactor(): Promise<number>;
    getDemandFactorSettings(): Promise<DemandFactorSettings>;
    getArNSReturnedNames(params?: PaginationParams<AoReturnedName>): Promise<PaginationResult<AoReturnedName>>;
    getArNSReturnedName({ name, }: {
        name: string;
    }): Promise<AoReturnedName | undefined>;
    getDelegations(params: PaginationParams<AoDelegation> & {
        address: WalletAddress;
    }): Promise<PaginationResult<AoDelegation>>;
    getAllowedDelegates(params: AoPaginatedAddressParams): Promise<PaginationResult<WalletAddress>>;
    getGatewayVaults(params: PaginationParams<AoGatewayVault> & {
        address: WalletAddress;
    }): Promise<PaginationResult<AoGatewayVault>>;
    getPrimaryNameRequest(params: {
        initiator: WalletAddress;
    }): Promise<AoPrimaryNameRequest>;
    getPrimaryNameRequests(params: PaginationParams<AoPrimaryNameRequest>): Promise<PaginationResult<AoPrimaryNameRequest>>;
    getPrimaryName(params: {
        address: WalletAddress;
    } | {
        name: string;
    }): Promise<AoPrimaryName>;
    getPrimaryNames(params: PaginationParams<AoPrimaryName>): Promise<PaginationResult<AoPrimaryName>>;
    /**
     * Get current redelegation fee percentage for address
     *
     * @param {Object} params - The parameters for fetching redelegation fee
     * @param {string} params.address - The address to fetch the fee for
     * @returns {Promise<AoMessageResult>} The redelegation fee result
     */
    getRedelegationFee(params: {
        address: WalletAddress;
    }): Promise<AoRedelegationFeeInfo>;
    getGatewayRegistrySettings(): Promise<AoGatewayRegistrySettings>;
}
export declare class ARIOWriteable extends ARIOReadable implements AoARIOWrite {
    protected process: AOProcess;
    private signer;
    constructor({ signer, ...config }: WithSigner<{
        process?: AOProcess;
    } | {
        processId?: string;
    }>);
    transfer({ target, qty, }: {
        target: string;
        qty: number | mARIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    joinNetwork({ operatorStake, allowDelegatedStaking, allowedDelegates, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }: AoJoinNetworkParams, options?: WriteOptions): Promise<AoMessageResult>;
    leaveNetwork(options?: WriteOptions): Promise<AoMessageResult>;
    updateGatewaySettings({ allowDelegatedStaking, allowedDelegates, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }: AoUpdateGatewaySettingsParams, options?: WriteOptions): Promise<AoMessageResult>;
    delegateStake(params: {
        target: string;
        stakeQty: number | mARIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    decreaseDelegateStake(params: {
        target: string;
        decreaseQty: number | mARIOToken;
        instant?: boolean;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Initiates an instant withdrawal from a gateway.
     *
     * @param {Object} params - The parameters for initiating an instant withdrawal
     * @param {string} params.address - The gateway address of the withdrawal, if not provided, the signer's address will be used
     * @param {string} params.vaultId - The vault ID of the withdrawal
     * @returns {Promise<AoMessageResult>} The result of the withdrawal
     */
    instantWithdrawal(params: {
        gatewayAddress?: string;
        vaultId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    increaseOperatorStake(params: {
        increaseQty: number | mARIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    decreaseOperatorStake(params: {
        decreaseQty: number | mARIOToken;
        instant?: boolean;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    saveObservations(params: {
        reportTxId: TransactionId;
        failedGateways: WalletAddress[];
    }, options?: WriteOptions): Promise<AoMessageResult>;
    buyRecord(params: {
        name: string;
        years?: number;
        type: 'lease' | 'permabuy';
        processId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Upgrades an existing leased record to a permabuy.
     *
     * @param {Object} params - The parameters for upgrading a record
     * @param {string} params.name - The name of the record to upgrade
     * @param {Object} [options] - The options for the upgrade
     * @returns {Promise<AoMessageResult>} The result of the upgrade
     */
    upgradeRecord(params: {
        name: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Extends the lease of an existing leased record.
     *
     * @param {Object} params - The parameters for extending a lease
     * @param {string} params.name - The name of the record to extend
     * @param {number} params.years - The number of years to extend the lease
     * @param {Object} [options] - The options for the extension
     * @returns {Promise<AoMessageResult>} The result of the extension
     */
    extendLease(params: {
        name: string;
        years: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    increaseUndernameLimit(params: {
        name: string;
        increaseCount: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    /**
     * Cancel a withdrawal from a gateway.
     *
     * @param {Object} params - The parameters for cancelling a withdrawal
     * @param {string} [params.address] - The address of the withdrawal (optional). If not provided, the signer's address will be used.
     * @param {string} params.vaultId - The vault ID of the withdrawal.
     * @param {Object} [options] - The options for the cancellation
     * @returns {Promise<AoMessageResult>} The result of the cancellation
     */
    cancelWithdrawal(params: {
        gatewayAddress?: WalletAddress;
        vaultId: string;
    }, options?: WriteOptions | undefined): Promise<AoMessageResult>;
    requestPrimaryName(params: {
        name: string;
    }): Promise<AoMessageResult>;
    /**
     * Redelegate stake from one gateway to another gateway.
     *
     * @param {Object} params - The parameters for redelegating stake
     * @param {string} params.target - The target gateway address
     * @param {string} params.source - The source gateway address
     * @param {number} params.stakeQty - The quantity of stake to redelegate
     * @param {string} params.vaultId - An optional vault ID to redelegate from
     * @param {Object} [options] - The options for the redelegation
     * @returns {Promise<AoMessageResult>} The result of the redelegation
     */
    redelegateStake(params: {
        target: string;
        source: string;
        stakeQty: number | mARIOToken;
        vaultId?: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
}
