"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initANTStateForAddress = exports.defaultTargetManifestId = exports.createAoSigner = exports.isAoSigner = exports.evolveANT = exports.spawnANT = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const arbundles_1 = require("@dha-team/arbundles");
const aoconnect_1 = require("@permaweb/aoconnect");
const zod_1 = require("zod");
const arweave_js_1 = require("../common/arweave.js");
const index_js_1 = require("../common/index.js");
const constants_js_1 = require("../constants.js");
async function spawnANT({ signer, module = constants_js_1.AOS_MODULE_ID, luaCodeTxId = constants_js_1.ANT_LUA_ID, ao = (0, aoconnect_1.connect)(), scheduler = constants_js_1.DEFAULT_SCHEDULER_ID, state, stateContractTxId, antRegistryId = constants_js_1.ANT_REGISTRY_ID, logger = index_js_1.Logger.default, arweave = arweave_js_1.defaultArweave, }) {
    //TODO: cache locally and only fetch if not cached
    const luaString = (await arweave.transactions.getData(luaCodeTxId, {
        decode: true,
        string: true,
    }));
    const processId = await ao.spawn({
        module,
        scheduler,
        signer,
        tags: [
            {
                name: 'ANT-Registry-Id',
                value: antRegistryId,
            },
            {
                name: 'Source-Code-TX-ID', // utility for understanding what the original source id of the lua code was
                value: luaCodeTxId,
            },
        ],
    });
    const aosClient = new index_js_1.AOProcess({
        processId,
        ao,
        logger,
    });
    const { id: evalId } = await aosClient.send({
        tags: [
            { name: 'Action', value: 'Eval' },
            { name: 'App-Name', value: 'ArNS-ANT' },
            { name: 'Source-Code-TX-ID', value: luaCodeTxId },
        ],
        data: luaString,
        signer,
    });
    logger.debug(`Spawned ANT`, {
        processId,
        module,
        scheduler,
        luaCodeTxId,
        evalId,
    });
    if (state) {
        const { id: initializeMsgId } = await aosClient.send({
            tags: [
                { name: 'Action', value: 'Initialize-State' },
                ...(stateContractTxId !== undefined
                    ? [{ name: 'State-Contract-TX-ID', value: stateContractTxId }]
                    : []),
            ],
            data: JSON.stringify(state),
            signer,
        });
        logger.debug(`Initialized ANT`, {
            processId,
            module,
            scheduler,
            initializeMsgId,
        });
    }
    const registryClient = index_js_1.ANTRegistry.init({
        process: new index_js_1.AOProcess({
            processId: antRegistryId,
            ao,
            logger,
        }),
        signer: signer,
    });
    const { id: antRegistrationMsgId } = await registryClient.register({
        processId,
    });
    logger.debug(`Registered ANT to ANT Registry`, {
        processId,
        module,
        scheduler,
        antRegistrationMsgId,
        antRegistryId,
    });
    return processId;
}
exports.spawnANT = spawnANT;
async function evolveANT({ signer, processId, luaCodeTxId = constants_js_1.ANT_LUA_ID, ao = (0, aoconnect_1.connect)(), logger = index_js_1.Logger.default, arweave = arweave_js_1.defaultArweave, }) {
    const aosClient = new index_js_1.AOProcess({
        processId,
        ao,
        logger,
    });
    //TODO: cache locally and only fetch if not cached
    const luaString = (await arweave.transactions.getData(luaCodeTxId, {
        decode: true,
        string: true,
    }));
    const { id: evolveMsgId } = await aosClient.send({
        tags: [
            { name: 'Action', value: 'Eval' },
            { name: 'App-Name', value: 'ArNS-ANT' },
            { name: 'Source-Code-TX-ID', value: luaCodeTxId },
        ],
        data: luaString,
        signer,
    });
    logger.debug(`Evolved ANT`, {
        processId,
        luaCodeTxId,
        evalMsgId: evolveMsgId,
    });
    return evolveMsgId;
}
exports.evolveANT = evolveANT;
function isAoSigner(value) {
    const TagSchema = zod_1.z.object({
        name: zod_1.z.string(),
        value: zod_1.z.union([zod_1.z.string(), zod_1.z.number()]),
    });
    const AoSignerSchema = zod_1.z
        .function()
        .args(zod_1.z.object({
        data: zod_1.z.union([zod_1.z.string(), zod_1.z.instanceof(Buffer)]),
        tags: zod_1.z.array(TagSchema).optional(),
        target: zod_1.z.string().optional(),
        anchor: zod_1.z.string().optional(),
    }))
        .returns(zod_1.z.promise(zod_1.z.object({
        id: zod_1.z.string(),
        raw: zod_1.z.instanceof(ArrayBuffer),
    })));
    try {
        AoSignerSchema.parse(value);
        return true;
    }
    catch {
        return false;
    }
}
exports.isAoSigner = isAoSigner;
function createAoSigner(signer) {
    if (isAoSigner(signer)) {
        return signer;
    }
    if (!('publicKey' in signer)) {
        return (0, aoconnect_1.createDataItemSigner)(signer);
    }
    const aoSigner = async ({ data, tags, target, anchor }) => {
        // ensure appropriate permissions are granted with injected signers.
        if (signer.publicKey === undefined &&
            'setPublicKey' in signer &&
            typeof signer.setPublicKey === 'function') {
            await signer.setPublicKey();
        }
        const dataItem = (0, arbundles_1.createData)(data, signer, { tags, target, anchor });
        const signedData = dataItem.sign(signer).then(async () => ({
            id: await dataItem.id,
            raw: await dataItem.getRaw(),
        }));
        return signedData;
    };
    return aoSigner;
}
exports.createAoSigner = createAoSigner;
exports.defaultTargetManifestId = '-k7t8xMoB8hW482609Z9F4bTFMC3MnuW8bTvTyT8pFI';
function initANTStateForAddress({ owner, targetId, ttlSeconds = 3600, keywords = [], controllers = [], description = '', ticker = 'aos', name = 'ANT', }) {
    return {
        ticker,
        name,
        description,
        keywords,
        owner,
        controllers: [owner, ...controllers],
        balances: { [owner]: 1 },
        records: {
            ['@']: {
                transactionId: targetId ?? exports.defaultTargetManifestId.toString(),
                ttlSeconds,
            },
        },
    };
}
exports.initANTStateForAddress = initANTStateForAddress;
