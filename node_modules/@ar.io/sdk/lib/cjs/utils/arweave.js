"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.paginationParamsToTags = exports.getCurrentBlockUnixTimestampMs = exports.pruneTags = exports.isBlockHeight = exports.validateArweaveId = void 0;
const constants_js_1 = require("../constants.js");
const validateArweaveId = (id) => {
    return constants_js_1.ARWEAVE_TX_REGEX.test(id);
};
exports.validateArweaveId = validateArweaveId;
function isBlockHeight(height) {
    return height !== undefined && !isNaN(parseInt(height.toString()));
}
exports.isBlockHeight = isBlockHeight;
const pruneTags = (tags) => {
    return tags.filter((tag) => tag.value !== undefined);
};
exports.pruneTags = pruneTags;
const getCurrentBlockUnixTimestampMs = async (arweave) => {
    return await arweave.blocks
        .getCurrent()
        .then((block) => {
        return block.timestamp * 1000;
    })
        .catch(() => {
        return Date.now(); // fallback to current time
    });
};
exports.getCurrentBlockUnixTimestampMs = getCurrentBlockUnixTimestampMs;
const paginationParamsToTags = (params) => {
    const tags = [
        { name: 'Cursor', value: params?.cursor?.toString() },
        { name: 'Limit', value: params?.limit?.toString() },
        { name: 'Sort-By', value: params?.sortBy?.toString() },
        { name: 'Sort-Order', value: params?.sortOrder?.toString() },
    ];
    return (0, exports.pruneTags)(tags);
};
exports.paginationParamsToTags = paginationParamsToTags;
