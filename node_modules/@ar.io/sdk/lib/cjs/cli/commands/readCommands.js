"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVault = exports.getGatewayVaults = exports.getPrimaryName = exports.getTokenCost = exports.getPrescribedNames = exports.getPrescribedObservers = exports.getEpoch = exports.listArNSReturnedNames = exports.getArNSReturnedName = exports.listArNSReservedNames = exports.getArNSReservedName = exports.listArNSRecords = exports.getArNSRecord = exports.getAllowedDelegates = exports.getDelegations = exports.getGatewayDelegates = exports.listGateways = exports.getGateway = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const io_js_1 = require("../../types/io.js");
const token_js_1 = require("../../types/token.js");
const utils_js_1 = require("../utils.js");
async function getGateway(o) {
    const address = (0, utils_js_1.requiredAddressFromOptions)(o);
    const gateway = await (0, utils_js_1.readARIOFromOptions)(o).getGateway({
        address,
    });
    return gateway ?? { message: `No gateway found for address ${address}` };
}
exports.getGateway = getGateway;
async function listGateways(o) {
    const gateways = await (0, utils_js_1.readARIOFromOptions)(o).getGateways((0, utils_js_1.paginationParamsFromOptions)(o));
    return gateways.items.length ? gateways : { message: 'No gateways found' };
}
exports.listGateways = listGateways;
async function getGatewayDelegates(o) {
    const address = (0, utils_js_1.requiredAddressFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getGatewayDelegates({
        address,
        ...(0, utils_js_1.paginationParamsFromOptions)(o),
    });
    return result.items?.length
        ? result
        : {
            message: `No delegates found for gateway ${address}`,
        };
}
exports.getGatewayDelegates = getGatewayDelegates;
async function getDelegations(o) {
    const address = (0, utils_js_1.requiredAddressFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getDelegations({
        address,
        ...(0, utils_js_1.paginationParamsFromOptions)(o),
    });
    return result.items?.length
        ? result
        : {
            message: `No delegations found for address ${address}`,
        };
}
exports.getDelegations = getDelegations;
async function getAllowedDelegates(o) {
    const address = (0, utils_js_1.requiredAddressFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getAllowedDelegates({
        address,
        ...(0, utils_js_1.paginationParamsFromOptions)(o),
    });
    return result.items?.length
        ? result
        : {
            message: `No allow list found for gateway delegate ${address}`,
        };
}
exports.getAllowedDelegates = getAllowedDelegates;
async function getArNSRecord(o) {
    const name = (0, utils_js_1.requiredStringFromOptions)(o, 'name');
    return ((await (0, utils_js_1.readARIOFromOptions)(o).getArNSRecord({
        name,
    })) ?? { message: `No record found for name ${name}` });
}
exports.getArNSRecord = getArNSRecord;
async function listArNSRecords(o) {
    const records = await (0, utils_js_1.readARIOFromOptions)(o).getArNSRecords((0, utils_js_1.paginationParamsFromOptions)(o));
    return records.items.length ? records : { message: 'No records found' };
}
exports.listArNSRecords = listArNSRecords;
async function getArNSReservedName(o) {
    const name = (0, utils_js_1.requiredStringFromOptions)(o, 'name');
    return ((await (0, utils_js_1.readARIOFromOptions)(o).getArNSReservedName({
        name,
    })) ?? { message: `No reserved name found for name ${name}` });
}
exports.getArNSReservedName = getArNSReservedName;
async function listArNSReservedNames(o) {
    const reservedNames = await (0, utils_js_1.readARIOFromOptions)(o).getArNSReservedNames((0, utils_js_1.paginationParamsFromOptions)(o));
    return reservedNames.items.length
        ? reservedNames
        : { message: 'No reserved names found' };
}
exports.listArNSReservedNames = listArNSReservedNames;
async function getArNSReturnedName(o) {
    const name = (0, utils_js_1.requiredStringFromOptions)(o, 'name');
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getArNSReturnedName({ name });
    return result ?? { message: `No returned name found for name ${name}` };
}
exports.getArNSReturnedName = getArNSReturnedName;
async function listArNSReturnedNames(o) {
    const returnedNames = await (0, utils_js_1.readARIOFromOptions)(o).getArNSReturnedNames((0, utils_js_1.paginationParamsFromOptions)(o));
    return returnedNames.items.length
        ? returnedNames
        : { message: 'No returned names found' };
}
exports.listArNSReturnedNames = listArNSReturnedNames;
async function getEpoch(o) {
    const epoch = await (0, utils_js_1.readARIOFromOptions)(o).getEpoch((0, utils_js_1.epochInputFromOptions)(o));
    return epoch ?? { message: `No epoch found for provided input` };
}
exports.getEpoch = getEpoch;
async function getPrescribedObservers(o) {
    const epoch = (0, utils_js_1.epochInputFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getPrescribedObservers(epoch);
    return result?.length
        ? result
        : { message: `No prescribed observers found for epoch ${epoch}` };
}
exports.getPrescribedObservers = getPrescribedObservers;
async function getPrescribedNames(o) {
    const epoch = (0, utils_js_1.epochInputFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getPrescribedNames((0, utils_js_1.epochInputFromOptions)(o));
    return result?.length
        ? result
        : { message: `No prescribed names found for epoch ${epoch}` };
}
exports.getPrescribedNames = getPrescribedNames;
async function getTokenCost(o) {
    o.intent ??= 'Buy-Record';
    o.type ??= 'lease';
    if (!(0, io_js_1.isValidIntent)(o.intent)) {
        throw new Error(`Invalid intent. Valid intents are: ${io_js_1.validIntents.join(', ')}`);
    }
    if (o.type !== 'lease' && o.type !== 'permabuy') {
        throw new Error(`Invalid type. Valid types are: lease, permabuy`);
    }
    if (o.type === 'lease' &&
        io_js_1.intentsUsingYears.includes(o.intent) &&
        o.years === undefined) {
        throw new Error('Years is required for lease type');
    }
    const tokenCost = await (0, utils_js_1.readARIOFromOptions)(o).getTokenCost({
        type: o.type,
        quantity: o.quantity !== undefined ? +o.quantity : undefined,
        years: o.years !== undefined ? +o.years : undefined,
        intent: o.intent,
        name: (0, utils_js_1.requiredStringFromOptions)(o, 'name'),
    });
    const output = {
        mIOTokenCost: tokenCost,
        message: `The cost of the provided action is ${(0, utils_js_1.formatARIOWithCommas)(new token_js_1.mARIOToken(tokenCost).toARIO())} ARIO`,
    };
    return output;
}
exports.getTokenCost = getTokenCost;
async function getPrimaryName(o) {
    const address = (0, utils_js_1.addressFromOptions)(o);
    const name = o.name;
    const params = name !== undefined
        ? { name }
        : address !== undefined
            ? { address }
            : undefined;
    if (params === undefined) {
        throw new Error('Either --address or --name is required');
    }
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getPrimaryName(params);
    return (result ?? {
        message: `No primary name found`,
    });
}
exports.getPrimaryName = getPrimaryName;
async function getGatewayVaults(o) {
    const address = (0, utils_js_1.requiredAddressFromOptions)(o);
    const result = await (0, utils_js_1.readARIOFromOptions)(o).getGatewayVaults({
        address,
        ...(0, utils_js_1.paginationParamsFromOptions)(o),
    });
    return result.items?.length
        ? result
        : {
            message: `No vaults found for gateway ${address}`,
        };
}
exports.getGatewayVaults = getGatewayVaults;
async function getVault(o) {
    return (0, utils_js_1.readARIOFromOptions)(o)
        .getVault({
        address: (0, utils_js_1.requiredAddressFromOptions)(o),
        vaultId: (0, utils_js_1.requiredStringFromOptions)(o, 'vaultId'),
    })
        .then((r) => r ?? {
        message: `No vault found for provided address and vault ID`,
    });
}
exports.getVault = getVault;
