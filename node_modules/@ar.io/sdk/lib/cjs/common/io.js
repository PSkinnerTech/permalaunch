"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARIOWriteable = exports.ARIOReadable = exports.ARIO = void 0;
const constants_js_1 = require("../constants.js");
const io_js_1 = require("../types/io.js");
const ao_js_1 = require("../utils/ao.js");
const arweave_js_1 = require("../utils/arweave.js");
const arweave_js_2 = require("./arweave.js");
const ao_process_js_1 = require("./contracts/ao-process.js");
const error_js_1 = require("./error.js");
class ARIO {
    static init(config) {
        if (config && config.signer) {
            const { signer, ...rest } = config;
            return new ARIOWriteable({
                ...rest,
                signer,
            });
        }
        return new ARIOReadable(config);
    }
}
exports.ARIO = ARIO;
class ARIOReadable {
    process;
    arweave;
    constructor(config, arweave = arweave_js_2.defaultArweave) {
        if (!config) {
            this.process = new ao_process_js_1.AOProcess({
                processId: constants_js_1.ARIO_TESTNET_PROCESS_ID,
            });
        }
        else if ((0, io_js_1.isProcessConfiguration)(config)) {
            this.process = config.process;
        }
        else if ((0, io_js_1.isProcessIdConfiguration)(config)) {
            this.process = new ao_process_js_1.AOProcess({
                processId: config.processId,
            });
        }
        else {
            throw new error_js_1.InvalidContractConfigurationError();
        }
        this.arweave = arweave;
    }
    async getInfo() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Info' }],
        });
    }
    async getTokenSupply() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Total-Token-Supply' }],
        });
    }
    async getEpochSettings(params) {
        const allTags = [
            { name: 'Action', value: 'Epoch-Settings' },
            {
                name: 'Timestamp',
                value: params?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: params?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getEpoch(epoch) {
        const allTags = [
            { name: 'Action', value: 'Epoch' },
            {
                name: 'Timestamp',
                value: epoch?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: epoch?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getArNSRecord({ name, }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Record' },
                { name: 'Name', value: name },
            ],
        });
    }
    async getArNSRecords(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Records' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getArNSReservedNames(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Reserved-Names' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getArNSReservedName({ name, }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Reserved-Name' },
                { name: 'Name', value: name },
            ],
        });
    }
    async getBalance({ address }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Balance' },
                { name: 'Address', value: address },
            ],
        });
    }
    async getBalances(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Balances' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getVault({ address, vaultId, }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Vault' },
                { name: 'Address', value: address },
                { name: 'Vault-Id', value: vaultId },
            ],
        });
    }
    async getVaults(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Vaults' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getGateway({ address, }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Gateway' },
                { name: 'Address', value: address },
            ],
        });
    }
    async getGatewayDelegates({ address, ...pageParams }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Delegates' },
                { name: 'Address', value: address },
                ...(0, arweave_js_1.paginationParamsToTags)(pageParams),
            ],
        });
    }
    async getGatewayDelegateAllowList({ address, ...pageParams }) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Allowed-Delegates' },
                { name: 'Address', value: address },
                ...(0, arweave_js_1.paginationParamsToTags)(pageParams),
            ],
        });
    }
    async getGateways(pageParams) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Gateways' },
                ...(0, arweave_js_1.paginationParamsToTags)(pageParams),
            ],
        });
    }
    async getCurrentEpoch() {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Epoch' },
                {
                    name: 'Timestamp',
                    value: (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
                },
            ],
        });
    }
    async getPrescribedObservers(epoch) {
        const allTags = [
            { name: 'Action', value: 'Epoch-Prescribed-Observers' },
            {
                name: 'Timestamp',
                value: epoch?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: epoch?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getPrescribedNames(epoch) {
        const allTags = [
            { name: 'Action', value: 'Epoch-Prescribed-Names' },
            {
                name: 'Timestamp',
                value: epoch?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: epoch?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getObservations(epoch) {
        const allTags = [
            { name: 'Action', value: 'Epoch-Observations' },
            {
                name: 'Timestamp',
                value: epoch?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: epoch?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getDistributions(epoch) {
        const allTags = [
            { name: 'Action', value: 'Epoch-Distributions' },
            {
                name: 'Timestamp',
                value: epoch?.timestamp?.toString() ??
                    (await (0, arweave_js_1.getCurrentBlockUnixTimestampMs)(this.arweave)).toString(),
            },
            {
                name: 'Epoch-Index',
                value: epoch?.epochIndex?.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getTokenCost({ intent, type, years, name, quantity, }) {
        const allTags = [
            { name: 'Action', value: 'Token-Cost' },
            {
                name: 'Intent',
                value: intent,
            },
            {
                name: 'Name',
                value: name,
            },
            {
                name: 'Years',
                value: years?.toString(),
            },
            {
                name: 'Quantity',
                value: quantity?.toString(),
            },
            {
                name: 'Purchase-Type',
                value: type,
            },
            {
                name: 'Timestamp',
                value: (await this.arweave.blocks
                    .getCurrent()
                    .then((block) => {
                    return { timestamp: block.timestamp * 1000 };
                })
                    .catch(() => {
                    return { timestamp: Date.now() }; // fallback to current time
                })).timestamp.toString(),
            },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getRegistrationFees() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Get-Registration-Fees' }],
        });
    }
    async getDemandFactor() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Demand-Factor' }],
        });
    }
    async getDemandFactorSettings() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Demand-Factor-Settings' }],
        });
    }
    async getArNSReturnedNames(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Returned-Names' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getArNSReturnedName({ name, }) {
        const allTags = [
            { name: 'Action', value: 'Returned-Name' },
            { name: 'Name', value: name },
        ];
        return this.process.read({
            tags: allTags,
        });
    }
    async getDelegations(params) {
        const allTags = [
            { name: 'Action', value: 'Paginated-Delegations' },
            { name: 'Address', value: params.address },
            ...(0, arweave_js_1.paginationParamsToTags)(params),
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getAllowedDelegates(params) {
        return this.getGatewayDelegateAllowList(params);
    }
    async getGatewayVaults(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Paginated-Gateway-Vaults' },
                { name: 'Address', value: params.address },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getPrimaryNameRequest(params) {
        const allTags = [
            { name: 'Action', value: 'Primary-Name-Request' },
            {
                name: 'Initiator',
                value: params.initiator,
            },
        ];
        return this.process.read({
            tags: allTags,
        });
    }
    async getPrimaryNameRequests(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Primary-Name-Requests' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    async getPrimaryName(params) {
        const allTags = [
            { name: 'Action', value: 'Primary-Name' },
            {
                name: 'Address',
                value: params?.address,
            },
            { name: 'Name', value: params?.name },
        ];
        return this.process.read({
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async getPrimaryNames(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Primary-Names' },
                ...(0, arweave_js_1.paginationParamsToTags)(params),
            ],
        });
    }
    /**
     * Get current redelegation fee percentage for address
     *
     * @param {Object} params - The parameters for fetching redelegation fee
     * @param {string} params.address - The address to fetch the fee for
     * @returns {Promise<AoMessageResult>} The redelegation fee result
     */
    async getRedelegationFee(params) {
        return this.process.read({
            tags: [
                { name: 'Action', value: 'Redelegation-Fee' },
                { name: 'Address', value: params.address },
            ],
        });
    }
    async getGatewayRegistrySettings() {
        return this.process.read({
            tags: [{ name: 'Action', value: 'Gateway-Registry-Settings' }],
        });
    }
}
exports.ARIOReadable = ARIOReadable;
class ARIOWriteable extends ARIOReadable {
    signer;
    constructor({ signer, ...config }) {
        if (Object.keys(config).length === 0) {
            super({
                process: new ao_process_js_1.AOProcess({
                    processId: constants_js_1.ARIO_TESTNET_PROCESS_ID,
                }),
            });
            this.signer = (0, ao_js_1.createAoSigner)(signer);
        }
        else if ((0, io_js_1.isProcessConfiguration)(config)) {
            super({ process: config.process });
            this.signer = (0, ao_js_1.createAoSigner)(signer);
        }
        else if ((0, io_js_1.isProcessIdConfiguration)(config)) {
            super({
                process: new ao_process_js_1.AOProcess({
                    processId: config.processId,
                }),
            });
            this.signer = (0, ao_js_1.createAoSigner)(signer);
        }
        else {
            throw new error_js_1.InvalidContractConfigurationError();
        }
    }
    async transfer({ target, qty, }, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            tags: [
                ...tags,
                { name: 'Action', value: 'Transfer' },
                {
                    name: 'Recipient',
                    value: target,
                },
                {
                    name: 'Quantity',
                    value: qty.valueOf().toString(),
                },
            ],
            signer: this.signer,
        });
    }
    async joinNetwork({ operatorStake, allowDelegatedStaking, allowedDelegates, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Join-Network' },
            {
                name: 'Operator-Stake',
                value: operatorStake.valueOf().toString(),
            },
            {
                name: 'Allow-Delegated-Staking',
                value: allowDelegatedStaking?.toString(),
            },
            {
                name: 'Allowed-Delegates',
                value: allowedDelegates?.join(','),
            },
            {
                name: 'Delegate-Reward-Share-Ratio',
                value: delegateRewardShareRatio?.toString(),
            },
            {
                name: 'FQDN',
                value: fqdn,
            },
            {
                name: 'Label',
                value: label,
            },
            {
                name: 'Min-Delegated-Stake',
                value: minDelegatedStake?.valueOf().toString(),
            },
            {
                name: 'Note',
                value: note,
            },
            {
                name: 'Port',
                value: port?.toString(),
            },
            {
                name: 'Properties',
                value: properties,
            },
            {
                name: 'Protocol',
                value: protocol,
            },
            {
                name: 'Auto-Stake',
                value: autoStake?.toString(),
            },
            {
                name: 'Observer-Address',
                value: observerAddress,
            },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async leaveNetwork(options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [...tags, { name: 'Action', value: 'Leave-Network' }],
        });
    }
    async updateGatewaySettings({ allowDelegatedStaking, allowedDelegates, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Update-Gateway-Settings' },
            { name: 'Label', value: label },
            { name: 'Note', value: note },
            { name: 'FQDN', value: fqdn },
            { name: 'Port', value: port?.toString() },
            { name: 'Properties', value: properties },
            { name: 'Protocol', value: protocol },
            { name: 'Observer-Address', value: observerAddress },
            {
                name: 'Allow-Delegated-Staking',
                value: allowDelegatedStaking?.toString(),
            },
            {
                name: 'Allowed-Delegates',
                value: allowedDelegates?.join(','),
            },
            {
                name: 'Delegate-Reward-Share-Ratio',
                value: delegateRewardShareRatio?.toString(),
            },
            {
                name: 'Min-Delegated-Stake',
                value: minDelegatedStake?.valueOf().toString(),
            },
            { name: 'Auto-Stake', value: autoStake?.toString() },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async delegateStake(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Delegate-Stake' },
                { name: 'Target', value: params.target },
                { name: 'Quantity', value: params.stakeQty.valueOf().toString() },
            ],
        });
    }
    async decreaseDelegateStake(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Decrease-Delegate-Stake' },
                { name: 'Target', value: params.target },
                { name: 'Quantity', value: params.decreaseQty.valueOf().toString() },
                { name: 'Instant', value: `${params.instant || false}` },
            ],
        });
    }
    /**
     * Initiates an instant withdrawal from a gateway.
     *
     * @param {Object} params - The parameters for initiating an instant withdrawal
     * @param {string} params.address - The gateway address of the withdrawal, if not provided, the signer's address will be used
     * @param {string} params.vaultId - The vault ID of the withdrawal
     * @returns {Promise<AoMessageResult>} The result of the withdrawal
     */
    async instantWithdrawal(params, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Instant-Withdrawal' },
            { name: 'Vault-Id', value: params.vaultId },
            { name: 'Address', value: params.gatewayAddress },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async increaseOperatorStake(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Increase-Operator-Stake' },
                { name: 'Quantity', value: params.increaseQty.valueOf().toString() },
            ],
        });
    }
    async decreaseOperatorStake(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Decrease-Operator-Stake' },
                { name: 'Quantity', value: params.decreaseQty.valueOf().toString() },
                { name: 'Instant', value: `${params.instant || false}` },
            ],
        });
    }
    async saveObservations(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Save-Observations' },
                {
                    name: 'Report-Tx-Id',
                    value: params.reportTxId,
                },
                {
                    name: 'Failed-Gateways',
                    value: params.failedGateways.join(','),
                },
            ],
        });
    }
    async buyRecord(params, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Buy-Record' },
            { name: 'Name', value: params.name },
            { name: 'Years', value: params.years?.toString() ?? '1' },
            { name: 'Process-Id', value: params.processId },
            { name: 'Purchase-Type', value: params.type || 'lease' },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    /**
     * Upgrades an existing leased record to a permabuy.
     *
     * @param {Object} params - The parameters for upgrading a record
     * @param {string} params.name - The name of the record to upgrade
     * @param {Object} [options] - The options for the upgrade
     * @returns {Promise<AoMessageResult>} The result of the upgrade
     */
    async upgradeRecord(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Upgrade-Name' }, // TODO: align on Update-Record vs. Upgrade-Name (contract currently uses Upgrade-Name)
                { name: 'Name', value: params.name },
            ],
        });
    }
    /**
     * Extends the lease of an existing leased record.
     *
     * @param {Object} params - The parameters for extending a lease
     * @param {string} params.name - The name of the record to extend
     * @param {number} params.years - The number of years to extend the lease
     * @param {Object} [options] - The options for the extension
     * @returns {Promise<AoMessageResult>} The result of the extension
     */
    async extendLease(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Extend-Lease' },
                { name: 'Name', value: params.name },
                { name: 'Years', value: params.years.toString() },
            ],
        });
    }
    async increaseUndernameLimit(params, options) {
        const { tags = [] } = options || {};
        return this.process.send({
            signer: this.signer,
            tags: [
                ...tags,
                { name: 'Action', value: 'Increase-Undername-Limit' },
                { name: 'Name', value: params.name },
                { name: 'Quantity', value: params.increaseCount.toString() },
            ],
        });
    }
    /**
     * Cancel a withdrawal from a gateway.
     *
     * @param {Object} params - The parameters for cancelling a withdrawal
     * @param {string} [params.address] - The address of the withdrawal (optional). If not provided, the signer's address will be used.
     * @param {string} params.vaultId - The vault ID of the withdrawal.
     * @param {Object} [options] - The options for the cancellation
     * @returns {Promise<AoMessageResult>} The result of the cancellation
     */
    async cancelWithdrawal(params, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Cancel-Withdrawal' },
            { name: 'Vault-Id', value: params.vaultId },
            { name: 'Address', value: params.gatewayAddress },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
    async requestPrimaryName(params) {
        return this.process.send({
            signer: this.signer,
            tags: [
                { name: 'Action', value: 'Request-Primary-Name' },
                { name: 'Name', value: params.name },
            ],
        });
    }
    /**
     * Redelegate stake from one gateway to another gateway.
     *
     * @param {Object} params - The parameters for redelegating stake
     * @param {string} params.target - The target gateway address
     * @param {string} params.source - The source gateway address
     * @param {number} params.stakeQty - The quantity of stake to redelegate
     * @param {string} params.vaultId - An optional vault ID to redelegate from
     * @param {Object} [options] - The options for the redelegation
     * @returns {Promise<AoMessageResult>} The result of the redelegation
     */
    async redelegateStake(params, options) {
        const { tags = [] } = options || {};
        const allTags = [
            ...tags,
            { name: 'Action', value: 'Redelegate-Stake' },
            { name: 'Target', value: params.target },
            { name: 'Source', value: params.source },
            { name: 'Quantity', value: params.stakeQty.valueOf().toString() },
            { name: 'Vault-Id', value: params.vaultId },
        ];
        return this.process.send({
            signer: this.signer,
            tags: (0, arweave_js_1.pruneTags)(allTags),
        });
    }
}
exports.ARIOWriteable = ARIOWriteable;
